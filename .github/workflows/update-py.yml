name: Conda Package Update Checker

##-------------------------------------------------------------------##
# Testing Locally

# act workflow_dispatch -W .github/workflows/update-py.yml  

##-------------------------------------------------------------------##

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # Every Monday at 00:00 UTC
  pull_request:
    paths:
      - docker/main/python-env/environment.yml
      - docker/full/python-env/environment.yml
    # types: 
    #   - review_requested
    #   - ready_for_review

permissions:
  issues: write

jobs:
  check-base-env-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "docker/main/python-env/environment.yml"
          python-version: 3.11

      - run: |
          uv pip install -q conda-lock

      - name: Strip version pins from environment.yml
        id: strip
        run: |
          python3 <<EOF
          import yaml
          import re

          version_op_pattern = re.compile(r"([<>=!~^])")
          def strip_version(dep_str):
            # Split on the first version operator
            match = version_op_pattern.search(dep_str)
            if match:
                return dep_str[:match.start()]
            else:
                return dep_str

          with open("docker/main/python-env/environment.yml") as f:
              env = yaml.safe_load(f)

          stripped_deps = []
          for dep in env.get("dependencies", []):
            if isinstance(dep, str):
                stripped_deps.append(strip_version(dep).strip())
            elif isinstance(dep, dict) and "pip" in dep:
                new_pip_deps = [strip_version(pkg).strip() for pkg in dep["pip"]]
                stripped_deps.append({"pip": new_pip_deps})

          new_env = {
              "name": env.get("name", "unpinned-env"),
              "channels": env.get("channels", []),
              "dependencies": stripped_deps
          }

          with open("unpinned-main-environment.yml", "w") as f:
              yaml.dump(new_env, f, sort_keys=False)
          EOF

      - name: Copy current base environment
        run: |
          cp docker/main/python-env/base-conda-lock.yml  base-current-lock.yml


      - name: Lock unpinned (latest) environment
        run: |
          conda-lock lock -f unpinned-main-environment.yml -p linux-64 --lockfile main-updated-lock.yml

      - name: Compare environments
        run: |
          python3 <<EOF
          import yaml
          from pathlib import Path


          def load_lock_packages(file_path):
              with open(file_path, "r") as f:
                  lock = yaml.safe_load(f)
              return {pkg["name"]: pkg["version"] for pkg in lock.get("package", [])}


          # Load lockfiles
          baseline = load_lock_packages("docker/main/python-env/base-conda-lock.yml")
          latest = load_lock_packages("main-updated-lock.yml")

          # Compare versions
          differences = {
              pkg: {"old": baseline[pkg], "new": latest[pkg]}
              for pkg in baseline
              if pkg in latest and baseline[pkg] != latest[pkg]
          }

          nochanges = {
              pkg: {"old": baseline[pkg], "new": latest[pkg]}
              for pkg in baseline
              if pkg in latest and baseline[pkg] == latest[pkg]
          }

          # Write to Markdown
          md_path = Path("base-env-diff.md")
          with md_path.open("w") as f:
              if differences:
                  f.write("#### Base Env Version Differences\n\n")
                  f.write("| Package | Current Version | Latest Version |\n")
                  f.write("|---------|-----------------|----------------|\n")
                  for pkg, versions in sorted(differences.items()):
                      f.write(f"| {pkg} | {versions['old']} | {versions['new']} |\n")
              else:
                  f.write("#### Base Env Version Differences\n\n")
                  f.write("No differences found between the two lock files.\n")
                  f.write("| Package | Current Version | Latest Version |\n")
                  f.write("|---------|-----------------|----------------|\n")
                  for pkg, versions in sorted(nochanges.items()):
                      f.write(f"| {pkg} | {versions['old']} | {versions['new']} |\n")

          print(f"Saved diff to {md_path.resolve()}")

          EOF

      - name: Workflow Summary (GitHub)
        run: |
          echo "## Base Environment Package Check" >> $GITHUB_STEP_SUMMARY
          cat base-env-diff.md >> $GITHUB_STEP_SUMMARY

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: base-env-diff
          retention-days: 7
          path: |
            base-env-diff.md

      - name: Read main image diff into output
        id: get-diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat base-env-diff.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create a GitHub issue with the package updates
        run: |
          if [[ $CLOSE_PREVIOUS == true ]]; then
            previous_issue_number=$(gh issue list \
              --label "$LABELS" \
              --json number \
              --jq '.[0].number')
            if [[ -n $previous_issue_number ]]; then
              gh issue close "$previous_issue_number"
              gh issue unpin "$previous_issue_number"
            fi
          fi
          new_issue_url=$(gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY")
          if [[ $PINNED == true ]]; then
            gh issue pin "$new_issue_url"
          fi
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GH_REPO: ${{ github.repository }}
          TITLE: Update main image python packages
          ASSIGNEES: pranavmishra90
          LABELS: CI-CD,dependencies
          BODY: |
            ${{ steps.get-diff.outputs.diff }}
          PINNED: false
          CLOSE_PREVIOUS: true  


      - name: Local workflow (Act)
        run: |
          touch github_step_summary.md
          export GITHUB_STEP_SUMMARY=github_step_summary.md
          echo "## Base Environment Package Check" >> github_step_summary.md
          cat base-env-diff.md >> $GITHUB_STEP_SUMMARY

  check-facsimilab-env-updates:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "docker/full/python-env/environment.yml"
          python-version: 3.11

      - run: |
          uv pip install -q conda-lock

      - name: Strip version pins from environment.yml
        id: strip
        run: |
          python3 <<EOF
          import yaml
          import re

          version_op_pattern = re.compile(r"([<>=!~^])")
          def strip_version(dep_str):
            # Split on the first version operator
            match = version_op_pattern.search(dep_str)
            if match:
                return dep_str[:match.start()]
            else:
                return dep_str

          with open("docker/full/python-env/environment.yml") as f:
              env = yaml.safe_load(f)

          stripped_deps = []
          for dep in env.get("dependencies", []):
            if isinstance(dep, str):
                stripped_deps.append(strip_version(dep).strip())
            elif isinstance(dep, dict) and "pip" in dep:
                new_pip_deps = [strip_version(pkg).strip() for pkg in dep["pip"]]
                stripped_deps.append({"pip": new_pip_deps})

          new_env = {
              "name": env.get("name", "unpinned-env"),
              "channels": env.get("channels", []),
              "dependencies": stripped_deps
          }

          with open("unpinned-full-environment.yml", "w") as f:
              yaml.dump(new_env, f, sort_keys=False)
          EOF

      - name: Copy current full environment
        run: |
          cp docker/full/python-env/facsimilab-conda-lock.yml  full-current-lock.yml


      - name: Lock unpinned (latest) environment
        run: |
          conda-lock lock -f unpinned-full-environment.yml -p linux-64 --lockfile full-updated-lock.yml

      - name: Compare environments
        run: |
          python3 <<EOF
          import yaml
          from pathlib import Path


          def load_lock_packages(file_path):
              with open(file_path, "r") as f:
                  lock = yaml.safe_load(f)
              return {pkg["name"]: pkg["version"] for pkg in lock.get("package", [])}


          # Load lockfiles
          baseline = load_lock_packages("docker/full/python-env/facsimilab-conda-lock.yml")
          latest = load_lock_packages("full-updated-lock.yml")

          # Compare versions
          differences = {
              pkg: {"old": baseline[pkg], "new": latest[pkg]}
              for pkg in baseline
              if pkg in latest and baseline[pkg] != latest[pkg]
          }

          nochanges = {
              pkg: {"old": baseline[pkg], "new": latest[pkg]}
              for pkg in baseline
              if pkg in latest and baseline[pkg] == latest[pkg]
          }

          # Write to Markdown
          md_path = Path("full-env-diff.md")
          with md_path.open("w") as f:
              if differences:
                  f.write("#### Full Env Version Differences\n\n")
                  f.write("| Package | Current Version | Latest Version |\n")
                  f.write("|---------|-----------------|----------------|\n")
                  for pkg, versions in sorted(differences.items()):
                      f.write(f"| {pkg} | {versions['old']} | {versions['new']} |\n")
              else:
                  f.write("#### Full Env Version Differences\n\n")
                  f.write("No differences found between the two lock files.\n")
                  f.write("| Package | Current Version | Latest Version |\n")
                  f.write("|---------|-----------------|----------------|\n")
                  for pkg, versions in sorted(nochanges.items()):
                      f.write(f"| {pkg} | {versions['old']} | {versions['new']} |\n")

          print(f"Saved diff to {md_path.resolve()}")

          EOF


      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: full-env-diff
          retention-days: 7
          path: |
            full-env-diff.md

      - name: Workflow summary
        run: cat full-env-diff.md >> $GITHUB_STEP_SUMMARY

      - name: Read full diff into output
        id: get-diff
        run: |
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          cat full-env-diff.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create a GitHub issue with the package updates
        run: |
          if [[ $CLOSE_PREVIOUS == true ]]; then
            previous_issue_number=$(gh issue list \
              --label "$LABELS" \
              --json number \
              --jq '.[0].number')
            if [[ -n $previous_issue_number ]]; then
              gh issue close "$previous_issue_number"
              gh issue unpin "$previous_issue_number"
            fi
          fi
          new_issue_url=$(gh issue create \
            --title "$TITLE" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY")
          if [[ $PINNED == true ]]; then
            gh issue pin "$new_issue_url"
          fi
        env:
          GH_TOKEN: ${{ secrets.ADD_TO_PROJECT_PAT }}
          GH_REPO: ${{ github.repository }}
          TITLE: Update full image python packages
          ASSIGNEES: pranavmishra90
          LABELS: CI-CD,dependencies
          BODY: |
            ${{ steps.get-diff.outputs.diff }}
          PINNED: false
          CLOSE_PREVIOUS: true      


      - name: Local workflow (Act)
        run: |
          touch github_step_summary.md
          export GITHUB_STEP_SUMMARY=github_step_summary.md
          echo "## Full Environment Package Update Check" >> github_step_summary.md
          cat full-env-diff.md >> $GITHUB_STEP_SUMMARY
